{"version":3,"sources":["components/Section.js","redux/phone/phonebookActions.js","redux/phone/phoneOperations.js","redux/phone/phoneSelectors.js","components/ContactListItem.js","components/ContactList.js","components/ContactEditor.js","components/Filter.js","components/App.js","redux/phone/phoneReducer.js","redux/store.js","index.js"],"names":["Section","children","addContactsRequest","createAction","addContactsSuccess","addContactsError","fetchContactsRequest","fetchContactsSuccess","fetchContactsError","removeContactsRequest","removeContactsSuccess","removeContactsError","changeFilter","axios","defaults","baseURL","addContact","name","number","dispatch","post","then","data","catch","error","fetchContacts","get","removeContact","id","delete","getContacts","state","contacts","items","getFilter","filter","getVisibleContacts","createSelector","contact","toLowerCase","includes","getContactById","contactId","find","item","connect","ownProps","phoneSelectors","onRemove","phoneOperations","type","className","onClick","length","map","key","NotUnicName","allContacts","newName","ContactEditor","handleChange","target","value","props","alert","setState","handleSubmit","e","preventDefault","onAddContact","this","onSubmit","htmlFor","onChange","Component","mapDispatchToProps","onChangeFilter","phoneSalectors","App","onFetchContacts","createReducer","action","payload","newContact","combineReducers","store","configureStore","reducer","phoneReducer","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.d83a43b9.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Section({ children }) {\r\n  return <section>{children}</section>;\r\n}\r\n\r\nSection.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};\r\nexport default Section;\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const addContactsRequest = createAction('contacts/addRequest');\r\nexport const addContactsSuccess = createAction('contacts/addSuccess');\r\nexport const addContactsError = createAction('contacts/addError');\r\n\r\nexport const fetchContactsRequest = createAction('contacts/fetchRequest');\r\nexport const fetchContactsSuccess = createAction('contacts/fetchSuccess');\r\nexport const fetchContactsError = createAction('contacts/fetchError');\r\n\r\nexport const removeContactsRequest = createAction('contacts/removeRequest');\r\nexport const removeContactsSuccess = createAction('contacts/removeSuccess');\r\nexport const removeContactsError = createAction('contacts/removeError');\r\n\r\nexport const changeFilter = createAction('phonebook/filter');\r\n","import axios from 'axios';\r\n\r\nimport {\r\n  addContactsError,\r\n  addContactsSuccess,\r\n  addContactsRequest,\r\n  fetchContactsRequest,\r\n  fetchContactsError,\r\n  fetchContactsSuccess,\r\n  removeContactsRequest,\r\n  removeContactsSuccess,\r\n  removeContactsError,\r\n} from './phonebookActions';\r\n\r\naxios.defaults.baseURL = 'http://localhost:2000';\r\n\r\nconst addContact = ({ name, number }) => dispatch => {\r\n  dispatch(addContactsRequest());\r\n  axios\r\n    .post('/contacts', {\r\n      name: name,\r\n      number: number,\r\n    })\r\n    .then(({ data }) => dispatch(addContactsSuccess(data)))\r\n    .catch(error => dispatch(addContactsError(error)));\r\n};\r\n\r\nconst fetchContacts = () => dispatch => {\r\n  dispatch(fetchContactsRequest());\r\n  axios\r\n    .get('/contacts')\r\n    .then(({ data }) => dispatch(fetchContactsSuccess(data)))\r\n    .catch(error => dispatch(fetchContactsError(error)));\r\n};\r\n\r\nconst removeContact = id => dispatch => {\r\n  dispatch(removeContactsRequest());\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(removeContactsSuccess(id)))\r\n    .catch(error => dispatch(removeContactsError(error)));\r\n};\r\n\r\nexport default { addContact, fetchContacts, removeContact };\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getContacts = state => state.contacts.items;\r\n\r\nconst getFilter = state => state.contacts.filter;\r\n\r\nconst getVisibleContacts = createSelector(\r\n  [getFilter, getContacts],\r\n  (filter, contacts) => {\r\n    return contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n    );\r\n  },\r\n);\r\n\r\nconst getContactById = (state, contactId) => {\r\n  const contacts = getContacts(state);\r\n  return contacts.find(item => item.id === contactId);\r\n};\r\n\r\nexport default { getVisibleContacts, getFilter, getContacts, getContactById };\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nimport phoneOperations from '../redux/phone/phoneOperations';\r\nimport phoneSelectors from '../redux/phone/phoneSelectors';\r\n\r\nconst ContactListItem = ({ name, number, onRemove }) => (\r\n  <li>\r\n    <span>\r\n      {name}: {number}\r\n    </span>\r\n    <button type=\"button\" className=\"deleteBtn\" onClick={onRemove}>\r\n      Delete\r\n    </button>\r\n  </li>\r\n);\r\n\r\nContactListItem.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  onRemove: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n  ...phoneSelectors.getContactById(state, ownProps.id),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n  onRemove: () => dispatch(phoneOperations.removeContact(ownProps.id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactListItem);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nimport ContactListItem from './ContactListItem';\r\nimport phoneSelectors from '../redux/phone/phoneSelectors';\r\n\r\nconst ContactList = ({ contacts }) => {\r\n  if (contacts.length > 0) {\r\n    return (\r\n      <ul>\r\n        {contacts.map(({ id }) => (\r\n          <ContactListItem key={id} id={id} />\r\n        ))}\r\n      </ul>\r\n    );\r\n  } else return null;\r\n};\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.array.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: phoneSelectors.getVisibleContacts(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(ContactList);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport phoneOperations from '../redux/phone/phoneOperations';\r\n\r\nconst NotUnicName = (allContacts, newName) => {\r\n  const findName = allContacts.find(contact => contact.name === newName);\r\n  return findName;\r\n};\r\n\r\nclass ContactEditor extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  handleChange = ({ target }) => {\r\n    const { name, value } = target;\r\n\r\n    const find = NotUnicName(this.props.items, value);\r\n    if (find) {\r\n      alert(`${value} is already in contacts!!!`);\r\n    } else\r\n      this.setState({\r\n        [name]: value,\r\n      });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.onAddContact(this.state);\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <>\r\n        <h2>Phonebook</h2>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <label htmlFor=\"name\">\r\n            Name\r\n            <br />\r\n            <input\r\n              type=\"text\"\r\n              value={name}\r\n              onChange={this.handleChange}\r\n              name=\"name\"\r\n            />\r\n          </label>\r\n          <label htmlFor=\"number\">\r\n            Number\r\n            <br />\r\n            <input\r\n              type=\"text\"\r\n              value={number}\r\n              onChange={this.handleChange}\r\n              name=\"number\"\r\n            />\r\n          </label>\r\n          <button type=\"submit\">Add contact</button>\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = state => {\r\n  return state.contacts;\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  onAddContact: phoneOperations.addContact,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactEditor);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { changeFilter } from '../redux/phone/phonebookActions';\r\nimport phoneSalectors from '../redux/phone/phoneSelectors';\r\n\r\nconst Filter = ({ contacts, value, onChangeFilter }) => {\r\n  if (contacts.length > 0) {\r\n    return (\r\n      <div>\r\n        <span>Find name</span>\r\n        <input\r\n          type=\"text\"\r\n          value={value}\r\n          onChange={e => onChangeFilter(e.target.value)}\r\n        />\r\n      </div>\r\n    );\r\n  } else return null;\r\n};\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  contacts: PropTypes.array.isRequired,\r\n  onChangeFilter: PropTypes.func.isRequired,\r\n};\r\nconst mapStateToProps = state => ({\r\n  contacts: state.contacts.items,\r\n  value: phoneSalectors.getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onChangeFilter: changeFilter,\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Section from './Section';\r\nimport ContactList from './ContactList';\r\nimport ContactEditor from './ContactEditor';\r\nimport Filter from './Filter';\r\nimport phoneOperations from '../redux/phone/phoneOperations';\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.onFetchContacts();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Section>\r\n        <ContactEditor />\r\n        <h2>Contacts</h2>\r\n        <Filter />\r\n        <ContactList />\r\n      </Section>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  onFetchContacts: phoneOperations.fetchContacts,\r\n};\r\nexport default connect(null, mapDispatchToProps)(App);\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\n\r\nimport {\r\n  addContactsSuccess,\r\n  changeFilter,\r\n  fetchContactsSuccess,\r\n  removeContactsSuccess,\r\n} from './phonebookActions';\r\n\r\nconst onAddContact = (state, action) => {\r\n  const newContact = action.payload;\r\n  return [...state, newContact];\r\n};\r\n\r\nconst onRemoveContact = (state, action) =>\r\n  state.filter(contact => contact.id !== action.payload);\r\n\r\nconst items = createReducer([], {\r\n  [fetchContactsSuccess]: (state, action) => action.payload,\r\n  [addContactsSuccess]: onAddContact,\r\n  [removeContactsSuccess]: onRemoveContact,\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [changeFilter]: (state, action) => action.payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n","import { configureStore } from '@reduxjs/toolkit';\r\n\r\nimport phoneReducer from './phone/phoneReducer';\r\n\r\nconst store = configureStore({\r\n  reducer: { contacts: phoneReducer },\r\n});\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './components/App';\nimport store from './redux/store';\n\nimport './index.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.querySelector('#root'),\n);\n"],"sourceRoot":""}